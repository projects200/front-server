name: CI/CD
on:
  push:
    paths:
      - '**'
  workflow_dispatch:

permissions:
  contents: read

env:
  LONG_CACHE: '--cache-control public,max-age=31536000,immutable'
  SHORT_CACHE: '--cache-control public,max-age=0,no-cache,must-revalidate'
  S3_SYNC_OPTS: '--delete'

jobs:
  client-CI-CD:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Create .env
        run: |
          echo "ref = $GITHUB_REF"
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "${{ secrets.MAIN_ENV }}" > .env
          else
            echo "${{ secrets.DEV_ENV }}" > .env
          fi

      - name: Build and Export
        run: |
          npm install
          npm run build

      - name: Set deploy env vars
        id: setenv
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "TARGET=main"                     >> "$GITHUB_OUTPUT"
            echo "POLICY_ID=${{ secrets.CF_RH_POLICY_MAIN_ID }}" >> "$GITHUB_ENV"
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "TARGET=dev"                      >> "$GITHUB_OUTPUT"
            echo "POLICY_ID=${{ secrets.CF_RH_POLICY_DEV_ID }}"  >> "$GITHUB_ENV"
          else
            echo "TARGET=none"                     >> "$GITHUB_OUTPUT"
          fi

      - name: Generate CSP header  
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        id: gen_csp
        shell: bash
        run: |
          HASHES=""
          while IFS= read -r script; do
            if [ -n "$script" ]; then
              HASH=$(printf '%s' "$script" | openssl dgst -sha256 -binary | openssl base64 -A)
              HASHES="$HASHES 'sha256-$HASH'"
            fi
          done < <(grep -rhoP '(?s)(?<=<script[^>]*>).*?(?=</script>)' ./out || true)

          CSP="default-src 'self'; script-src 'self'$HASHES 'strict-dynamic'; object-src 'none'; base-uri 'self';"
          echo "csp_header=$CSP"  >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update CloudFront CSP header
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        env:
          POLICY_ID: ${{ env.POLICY_ID }}
          CSP:       ${{ steps.gen_csp.outputs.csp_header }}
        run: |
          aws cloudfront get-response-headers-policy-config \
            --id "$POLICY_ID" > old.json
          ETag=$(jq -r '.ETag' old.json)

          jq --arg c "$CSP" \
            '.ResponseHeadersPolicyConfig.SecurityHeadersConfig.ContentSecurityPolicy.Content=$c
            | .ResponseHeadersPolicyConfig' \
            old.json > new.json

          aws cloudfront update-response-headers-policy \
            --id "$POLICY_ID" \
            --if-match "$ETag" \
            --response-headers-policy-config file://new.json

      - name: Upload static assets (MAIN)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          BUCKET=${{ secrets.AWS_S3_CLIENT_MAIN_BUCKET_NAME }}
          aws s3 sync ./out s3://$BUCKET \
              --exclude "index.html" $LONG_CACHE $S3_SYNC_OPTS

      - name: Upload index.html (MAIN)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          BUCKET=${{ secrets.AWS_S3_CLIENT_MAIN_BUCKET_NAME }}
          aws s3 cp ./out/index.html s3://$BUCKET/index.html $SHORT_CACHE

      - name: Upload static assets (DEV)
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          BUCKET=${{ secrets.AWS_S3_CLIENT_DEV_BUCKET_NAME }}
          aws s3 sync ./out s3://$BUCKET \
              --exclude "index.html" $LONG_CACHE $S3_SYNC_OPTS

      - name: Upload index.html (DEV)
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          BUCKET=${{ secrets.AWS_S3_CLIENT_DEV_BUCKET_NAME }}
          aws s3 cp ./out/index.html s3://$BUCKET/index.html $SHORT_CACHE
